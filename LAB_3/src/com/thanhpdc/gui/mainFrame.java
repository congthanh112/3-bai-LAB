package com.thanhpdc.gui;

import com.thanhpdc.dto.EmployeeDTO;
import com.thanhpdc.util.checkValue;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class mainFrame extends javax.swing.JFrame {

    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    ArrayList<EmployeeDTO> listEmp = new ArrayList<>();
    int index = -1;
    boolean flagCreateNew = false;
    boolean flagFindByID = false;
    boolean flagUpdate = false;

    public mainFrame() {
        initComponents();
        this.setTitle("Employee Management");
        setLocationRelativeTo(null);

        //Add vài thằng để test
        try {
            listEmp.add(new EmployeeDTO("E01", "AAA", "0142536789", "aaaa@gmail.com", "TpHCM", sdf.parse("20/02/2000"), false));
            listEmp.add(new EmployeeDTO("E02", "BBB", "0142861751", "bbbb@fpt.edu.vn", "TpHCM", sdf.parse("19/08/2001"), false));
            listEmp.add(new EmployeeDTO("E03", "CCC", "0147885159", "cccc@yahoo.com", "TpHCM", sdf.parse("01/12/2002"), false));
            listEmp.add(new EmployeeDTO("E04", "DDD", "0147885159", "dddd@fe.edu.vn", "TpHCM", sdf.parse("11/09/2002"), false));
            listEmp.add(new EmployeeDTO("E05", "EEE", "0147885159", "eeee@gmail.com", "TpHCM", sdf.parse("27/08/2002"), false));
        } catch (Exception e) {
        }

    }

    public boolean checkUpdateStatus() {
        try {
            if (index >= 0) {
                String empID = txtEmpID.getText().trim();
                String fullName = txtFullname.getText().trim();
                String phone = txtPhone.getText().trim();
                String email = txtEmail.getText().trim();
                String address = txtAddress.getText().trim();
                String DOB = txtDOB.getText();
                for (EmployeeDTO employees : listEmp) {
                    if (empID.equals(employees.getEmpID())) {
                        if (!fullName.equals(employees.getFullName())
                                || !phone.equals(employees.getPhone())
                                || !email.equals(employees.getEmail())
                                || !address.equals(employees.getAddress())
                                || !sdf.parse(DOB).equals(employees.getDateOfBirth())) {
                            return false;
                            //Có 1 thằng nào bị sửa, return false
                        }
                    }
                }
            }
        } catch (Exception e) {
        }

        return true;
    }

    public int findID(String empID) {
        for (int i = 0; i < listEmp.size(); i++) {
            if (empID.equals(listEmp.get(i).getEmpID())) {
                return i;
            }
        }
        return -1;
    }

    public void whenCreate() {
        txtEmpID.setText("");
        txtFullname.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtDOB.setText("");
        txtEmpID.setEditable(true);
        txtFullname.setEditable(true);
        txtPhone.setEditable(true);
        txtEmail.setEditable(true);
        txtAddress.setEditable(true);
        txtDOB.setEditable(true);
        btnCreateEmp.setEnabled(true);
        btnFindByEmpID.setEnabled(false);
        btnGetAllEmp.setEnabled(false);
        btnRemoveEmp.setEnabled(false);
        btnUpdateEmp.setEnabled(false);
        tblEmp.setEnabled(false);
        tblEmp.clearSelection();
    }

    public void whenClick() {
        txtEmpID.setEditable(false);
        txtFullname.setEditable(true);
        txtPhone.setEditable(true);
        txtEmail.setEditable(true);
        txtAddress.setEditable(true);
        txtDOB.setEditable(true);
        btnCreateEmp.setEnabled(true);
        btnFindByEmpID.setEnabled(true);
        btnGetAllEmp.setEnabled(true);
        btnRemoveEmp.setEnabled(true);
        btnUpdateEmp.setEnabled(true);
        tblEmp.setEnabled(true);
    }

    public void clearNotification() {
        lblEmpIDWarnning.setText("");
        lblFullnameWarnning.setText("");
        lblPhoneWarnning.setText("");
        lblEmailWarnning.setText("");
        lblAddressWarnning.setText("");
        lblDOBWarnning.setText("");
        lblNotification.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnGetAllEmp = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblEmpID = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        btnFindByEmpID = new javax.swing.JButton();
        txtFullname = new javax.swing.JTextField();
        lblFullname = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblAddress = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        btnRemoveEmp = new javax.swing.JButton();
        btnUpdateEmp = new javax.swing.JButton();
        btnCreateEmp = new javax.swing.JButton();
        lblEmpIDWarnning = new javax.swing.JLabel();
        lblPhoneWarnning = new javax.swing.JLabel();
        lblFullnameWarnning = new javax.swing.JLabel();
        lblEmailWarnning = new javax.swing.JLabel();
        lblAddressWarnning = new javax.swing.JLabel();
        lblDOBWarnning = new javax.swing.JLabel();
        lblNotification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmpID", "Fullname", "Phone", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEmp.getTableHeader().setReorderingAllowed(false);
        tblEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblEmpMouseReleased(evt);
            }
        });
        tblEmp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblEmpKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmp);

        lblTitle.setFont(new java.awt.Font("Viner Hand ITC", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 153, 204));
        lblTitle.setText("Employee Management");

        btnGetAllEmp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGetAllEmp.setText("Get All Emp");
        btnGetAllEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllEmpActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Emp's Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 0, 0))); // NOI18N

        lblEmpID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblEmpID.setText("Emp ID");

        txtEmpID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtEmpID.setEnabled(false);

        btnFindByEmpID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFindByEmpID.setText("Find By EmpID");
        btnFindByEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByEmpIDActionPerformed(evt);
            }
        });

        txtFullname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtFullname.setEnabled(false);

        lblFullname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFullname.setText("Full Name");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPhone.setEnabled(false);

        lblPhone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPhone.setText("Phone numer");

        txtEmail.setEnabled(false);

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblEmail.setText("Email");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.setEnabled(false);
        jScrollPane2.setViewportView(txtAddress);

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAddress.setText("Address");

        txtDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDOB.setEnabled(false);

        lblDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDOB.setText("Date of Birth");

        btnRemoveEmp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveEmp.setText("Remove Emp");
        btnRemoveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEmpActionPerformed(evt);
            }
        });

        btnUpdateEmp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdateEmp.setText("Update Emp");
        btnUpdateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmpActionPerformed(evt);
            }
        });

        btnCreateEmp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCreateEmp.setText("Create Emp");
        btnCreateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEmpActionPerformed(evt);
            }
        });

        lblEmpIDWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblEmpIDWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblPhoneWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblPhoneWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblFullnameWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblFullnameWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblEmailWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblEmailWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblAddressWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblAddressWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblDOBWarnning.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblDOBWarnning.setForeground(new java.awt.Color(255, 0, 0));

        lblNotification.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblNotification.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblFullname)
                                        .addComponent(lblPhone))
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblAddress)
                                        .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(23, 23, 23)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPhoneWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFullnameWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblEmailWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(90, 90, 90)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lblEmpID)
                            .addGap(26, 26, 26)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblEmpIDWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnFindByEmpID)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(lblAddressWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDOB)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDOBWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNotification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreateEmp)
                        .addGap(40, 40, 40)
                        .addComponent(btnUpdateEmp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveEmp)))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpID)
                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByEmpID))
                .addGap(1, 1, 1)
                .addComponent(lblEmpIDWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFullname)
                    .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFullnameWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPhoneWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lblAddress))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEmailWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAddressWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDOB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDOBWarnning, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateEmp)
                    .addComponent(btnUpdateEmp)
                    .addComponent(btnRemoveEmp))
                .addGap(18, 18, 18)
                .addComponent(lblNotification, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(btnGetAllEmp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(239, 239, 239))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnGetAllEmp)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetAllEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllEmpActionPerformed
        // TODO add your handling code here:
        clearNotification();
        if (!checkUpdateStatus()) {
            JOptionPane.showMessageDialog(null, "Please finish UPDATE");
            return;
        } else {
            index = -1;
            tblEmp.clearSelection();
            DefaultTableModel model = (DefaultTableModel) tblEmp.getModel();
            model.getDataVector().removeAllElements();
            for (EmployeeDTO employees : listEmp) {
                if (!employees.isIsDelete()) {
                    Vector row = new Vector();
                    row.add(employees.getEmpID());
                    row.add(employees.getFullName());
                    row.add(employees.getPhone());
                    row.add(employees.getEmail());
                    model.addRow(row);
                }
            }
            txtEmpID.setText("");
            txtFullname.setText("");
            txtPhone.setText("");
            txtEmail.setText("");
            txtAddress.setText("");
            txtDOB.setText("");

            txtEmpID.setEditable(true);
            txtFullname.setEditable(false);
            txtPhone.setEditable(false);
            txtEmail.setEditable(false);
            txtAddress.setEditable(false);
            txtDOB.setEditable(false);

            btnCreateEmp.setEnabled(true);
            btnFindByEmpID.setEnabled(true);
            btnGetAllEmp.setEnabled(true);
            btnRemoveEmp.setEnabled(true);
            btnUpdateEmp.setEnabled(true);
            tblEmp.setEnabled(true);
            tblEmp.updateUI();

        }
    }//GEN-LAST:event_btnGetAllEmpActionPerformed

    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseClicked
        // TODO add your handling code here:
        clearNotification();
        btnFindByEmpID.setText("Find by EmpID");
        flagFindByID = false;
        if (!checkUpdateStatus() && !flagCreateNew) {
            JOptionPane.showMessageDialog(null, "Please finish UPDATE");
            return;
        } else {
            index = tblEmp.getSelectedRow();
            if (index >= 0) {
                whenClick();
                try {
                    txtEmpID.setText(listEmp.get(index).getEmpID());
                    txtFullname.setText(listEmp.get(index).getFullName());
                    txtPhone.setText(listEmp.get(index).getPhone());
                    txtEmail.setText(listEmp.get(index).getEmail());
                    txtAddress.setText(listEmp.get(index).getAddress());
                    txtDOB.setText(sdf.format(listEmp.get(index).getDateOfBirth()));

                    txtEmpID.setEditable(false);
                    txtFullname.setEditable(false);
                    txtPhone.setEditable(false);
                    txtEmail.setEditable(false);
                    txtAddress.setEditable(false);
                    txtDOB.setEditable(false);
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_tblEmpMouseClicked

    private void btnFindByEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByEmpIDActionPerformed
        // TODO add your handling code here:
        clearNotification();
        tblEmp.clearSelection();
//        if (!checkUpdateStatus()) {
//            JOptionPane.showMessageDialog(null, "Please finish UPDATE");
//            return;
//        }
        if (flagFindByID == false) {
            txtEmpID.setEnabled(true);
            txtEmpID.setEditable(true);
            btnFindByEmpID.setText("Find");
            flagFindByID = true;
            txtEmpID.setText("");
            txtFullname.setText("");
            txtPhone.setText("");
            txtEmail.setText("");
            txtAddress.setText("");
            txtDOB.setText("");
        } else {
            txtEmpID.setEditable(false);
//            txtFullname.setEditable(false);
//            txtPhone.setEditable(false);
//            txtEmail.setEditable(false);
//            txtAddress.setEditable(false);
//            txtDOB.setEditable(false);
            if (tblEmp.getSelectedRow() == -1) {
                try {
                    String IDtoFind = txtEmpID.getText();
                    if (checkValue.checkEmpId(IDtoFind)) {
                        int checkID = findID(IDtoFind);
                        if (IDtoFind.isEmpty()) {
                            lblEmpIDWarnning.setText("Please input EmpID to find  ");
                        } else if (checkID == -1) {
                            lblEmpIDWarnning.setText("Your EmpID is doesn't exist  ");
                            txtEmpID.setText("");
                            txtEmpID.requestFocus();
                        } else if (listEmp.get(checkID).isIsDelete() == true) {
                            lblEmpIDWarnning.setText("This Employee was deleted  ");
                        } else {
                            txtEmpID.setText(listEmp.get(checkID).getEmpID());
                            txtFullname.setText(listEmp.get(checkID).getFullName());
                            txtPhone.setText(listEmp.get(checkID).getPhone());
                            txtEmail.setText(listEmp.get(checkID).getEmail());
                            txtAddress.setText(listEmp.get(checkID).getAddress());
                            txtDOB.setText(sdf.format(listEmp.get(checkID).getDateOfBirth()));
                            tblEmp.setRowSelectionInterval(checkID, checkID);
                            index = tblEmp.getSelectedRow();
                            txtEmpID.setEnabled(true);
                            txtEmpID.setEditable(false);
                            txtFullname.setEnabled(true);
                            txtFullname.setEditable(false);
                            txtPhone.setEnabled(true);
                            txtPhone.setEditable(false);
                            txtEmail.setEnabled(true);
                            txtEmail.setEditable(false);
                            txtAddress.setEnabled(true);
                            txtAddress.setEditable(false);
                            txtDOB.setEnabled(true);
                        }
                    } else {
                        lblEmpIDWarnning.setText("Max length of EmpID is 10 and not contains (@, #, $)  ");
                    }

                } catch (Exception ex) {
                }

            } else if (tblEmp.getSelectedRow() >= 0 && checkUpdateStatus()) {
                txtEmpID.setEditable(false);
                btnGetAllEmpActionPerformed(null);
            }
            btnFindByEmpID.setText("Find by EmpID");
            flagFindByID = false;
        }
    }//GEN-LAST:event_btnFindByEmpIDActionPerformed

    private void btnCreateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEmpActionPerformed
        // TODO add your handling code here:
        clearNotification();
        txtEmpID.setEnabled(true);
        txtEmpID.setEditable(true);
        txtFullname.setEnabled(true);
        txtFullname.setEditable(true);
        txtPhone.setEnabled(true);
        txtPhone.setEditable(true);
        txtEmail.setEnabled(true);
        txtEmail.setEditable(true);
        txtAddress.setEnabled(true);
        txtAddress.setEditable(true);
        txtDOB.setEnabled(true);
        txtDOB.setEditable(true);
        if (!checkUpdateStatus() /*&& flagCreateNew == false*/) {
            JOptionPane.showMessageDialog(null, "Please finish UPDATE");
            index = tblEmp.getSelectedRow();
            return;
        } else {
            if (flagCreateNew == false) {
                flagCreateNew = true;
                whenCreate();
                btnCreateEmp.setText("Save");
                btnFindByEmpID.setEnabled(false);
            } else if (flagCreateNew) {
                int ans = JOptionPane.showConfirmDialog(null, "Do you want to SAVE?", "SAVE", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    try {
                        String empID = txtEmpID.getText().trim();
                        String fullName = txtFullname.getText().trim();
                        String phone = txtPhone.getText().trim();
                        String email = txtEmail.getText().trim();
                        String address = txtAddress.getText().trim();
                        String DOB = txtDOB.getText();
                        boolean check = checkValue.checkEmpId(empID) && checkValue.checkFullName(fullName)
                                && checkValue.checkPhone(phone) && checkValue.checkEmail(email)
                                && checkValue.checkAddress(address) && checkValue.checkDateOfBirth(DOB);                               
                        if (empID.isEmpty() || fullName.isEmpty() || phone.isEmpty() || email.isEmpty() || address.isEmpty() || DOB.isEmpty()) {                          
                            if (empID.isEmpty()) {
                                lblEmpIDWarnning.setText("Please input Emp ID  ");                               
                            }
                            if (fullName.isEmpty()) {
                                lblFullnameWarnning.setText("Please input Full name  ");                                
                            }
                            if (phone.isEmpty()) {
                                lblPhoneWarnning.setText("Please input Phone number  ");                                                               
                            }
                            if (email.isEmpty()) {
                                lblEmailWarnning.setText("Please input Email  ");         
                            }
                            if (address.isEmpty()) {
                                lblAddressWarnning.setText("Please input Address  ");                             
                            }
                            if (DOB.isEmpty()) {
                                lblDOBWarnning.setText("Please input Date of Birth  ");                               
                            }                           
                            return;
                        } else if (!check) {
                            if (!checkValue.checkEmpId(empID)) {
                                lblEmpIDWarnning.setText("Max length of ID is 10 and not contains (@, #, $)  ");
                                txtEmpID.setText("");
                            }
                            if (!checkValue.checkFullName(fullName)) {
                                lblFullnameWarnning.setText("Max length of Fullname is 30  ");
                                txtFullname.setText("");
                            }
                            if (!checkValue.checkPhone(phone)) {
                                lblPhoneWarnning.setText("Max length of phone is 15 and contain numeric only  ");
                                txtPhone.setText("");
                            }
                            if (!checkValue.checkEmail(email)) {
                                lblEmailWarnning.setText("Max length of email is 30 and not contain (!, #, $)  ");
                                txtEmail.setText("");
                            }
                            if (!checkValue.checkAddress(address)) {
                                lblAddressWarnning.setText("Address: max length is 300  ");
                                txtAddress.setText("");
                            }
                            if (!address.matches(".{0,30}")) {
                                lblAddressWarnning.setText("Please don't use Enter character  ");
                                txtAddress.setText("");
                            }
                            if (!checkValue.checkDateOfBirth(DOB)) {
                                lblDOBWarnning.setText("Your input date is invalid  ");
                                txtDOB.setText("");
                            }
                            return;
                        } else if (findID(empID) != -1) {
                            lblEmpIDWarnning.setText("Your input ID is already exist  ");
                        } else {
                            EmployeeDTO emp = new EmployeeDTO(empID, fullName, phone, email, address, sdf.parse(DOB), false);
                            listEmp.add(emp);
                            JOptionPane.showMessageDialog(null, "Created successfully");
                            btnFindByEmpID.setEnabled(true);
                            btnCreateEmp.setText("Create Emp");
                            flagCreateNew = false;
                            btnGetAllEmpActionPerformed(null);
                            txtEmpID.setEditable(false);
                        }
                    } catch (Exception e) {
                    }
                } else if (ans == JOptionPane.NO_OPTION) {
                    btnCreateEmp.setText("Create Emp");
                    txtEmpID.setText("");
                    txtFullname.setText("");
                    txtPhone.setText("");
                    txtEmail.setText("");
                    txtAddress.setText("");
                    txtDOB.setText("");
                    flagCreateNew = false;
                    btnGetAllEmpActionPerformed(null);
                    txtEmpID.setEditable(false);
                } else if (ans == JOptionPane.CANCEL_OPTION) {
                    btnCreateEmp.setText("Create Emp");
                    flagCreateNew = false;
                    btnGetAllEmpActionPerformed(null);
                    txtEmpID.setEditable(false);
                }
            }
        }
    }//GEN-LAST:event_btnCreateEmpActionPerformed

    private void btnUpdateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmpActionPerformed
        // TODO add your handling code here:
        clearNotification();
        btnFindByEmpID.setEnabled(false);
        if (txtEmpID.getText() != null) {
            index = findID(txtEmpID.getText());
        } else {
            index = tblEmp.getSelectedRow();
        }

        if (index < 0) {
            JOptionPane.showMessageDialog(null, "Please choose any Employees to UPDATE");
            btnFindByEmpID.setEnabled(true);
        } else if (index >= 0) {
            tblEmp.setEnabled(false);
            if (flagUpdate == false) {
                txtEmpID.setEnabled(true);
                txtEmpID.setEditable(false);
                txtFullname.setEnabled(true);
                txtFullname.setEditable(true);
                txtPhone.setEnabled(true);
                txtPhone.setEditable(true);
                txtEmail.setEnabled(true);
                txtEmail.setEditable(true);
                txtAddress.setEnabled(true);
                txtAddress.setEditable(true);
                txtDOB.setEnabled(true);
                txtDOB.setEditable(true);
                btnUpdateEmp.setText("Save");
                flagUpdate = true;
            } else {
                if (checkUpdateStatus() == true) {
                    JOptionPane.showMessageDialog(null, "You have doing nothing");
                    btnUpdateEmp.setText("Update Emp");
                    flagUpdate = false;
                    txtEmpID.setEditable(false);
                    txtFullname.setEditable(false);
                    txtPhone.setEditable(false);
                    txtEmail.setEditable(false);
                    txtAddress.setEditable(false);
                    txtDOB.setEditable(false);
                } else {
                    try {
                        String empID = txtEmpID.getText().trim();
                        String fullName = txtFullname.getText().trim();
                        String phone = txtPhone.getText().trim();
                        String email = txtEmail.getText().trim();
                        String address = txtAddress.getText().trim();
                        String DOB = txtDOB.getText();
                        boolean check = checkValue.checkEmpId(empID) && checkValue.checkFullName(fullName)
                                && checkValue.checkPhone(phone) && checkValue.checkEmail(email)
                                && checkValue.checkAddress(address) && address.matches(".{0,30}")
                                && checkValue.checkDateOfBirth(DOB);
                        if (empID.isEmpty() || fullName.isEmpty() || phone.isEmpty() || email.isEmpty() || address.isEmpty() || DOB.isEmpty()) {
                            if (empID.isEmpty()) {
                                lblEmpIDWarnning.setText("Please input Emp ID");
                            }
                            if (fullName.isEmpty()) {
                                lblFullnameWarnning.setText("Please input Full name");
                            }
                            if (phone.isEmpty()) {
                                lblPhoneWarnning.setText("Please input Phone number");
                            }
                            if (email.isEmpty()) {
                                lblEmailWarnning.setText("Please input Email");
                            }
                            if (address.isEmpty()) {
                                lblAddressWarnning.setText("Please input Address");
                            }
                            if (DOB.isEmpty()) {
                                lblDOBWarnning.setText("Please input Date of Birth");
                            }
                            return;
                        } else if (!check) {
                            if (!checkValue.checkEmpId(empID)) {
                                lblEmpIDWarnning.setText("Max length of ID is 10 and not contains (@, #, $)");
                                txtEmpID.setText("");
                            } else if (!checkValue.checkFullName(fullName)) {
                                lblFullnameWarnning.setText("Max length of Fullname is 30");
                                txtFullname.setText("");
                            } else if (!checkValue.checkPhone(phone)) {
                                lblPhoneWarnning.setText("Max length of phone is 15 and contain numeric only");
                                txtPhone.setText("");
                            } else if (!checkValue.checkEmail(email)) {
                                lblEmailWarnning.setText("Max length of email is 30 and not contain (!, #, $)");
                                txtEmail.setText("");
                            } else if (!checkValue.checkAddress(address)) {
                                lblAddressWarnning.setText("Max length of address is 300");
                                txtAddress.setText("");
                            } else if (!address.matches(".{0,30}")) {
                                lblAddressWarnning.setText("Please don't use Enter character");
                                txtAddress.setText("");
                            } else if (!checkValue.checkDateOfBirth(DOB)) {
                                lblDOBWarnning.setText("Your input date is invalid");
                                txtDOB.setText("");
                            }
                            return;
                        } else {
                            for (EmployeeDTO employees : listEmp) {
                                if (empID.equals(employees.getEmpID())) {
                                    employees.setFullName(fullName);
                                    employees.setPhone(phone);
                                    employees.setEmail(email);
                                    employees.setAddress(address);
                                    employees.setDateOfBirth(sdf.parse(DOB));

                                    JOptionPane.showMessageDialog(null, "Update successfully");
                                    btnGetAllEmpActionPerformed(null);
                                    btnUpdateEmp.setText("Update Emp");
                                    flagUpdate = false;
                                    btnFindByEmpID.setEnabled(true);
                                    txtEmpID.setEditable(false);
                                    tblEmp.setEnabled(true);
                                }
                            }

                        }
                    } catch (Exception e) {
                    }
                }
            }
        }
    }//GEN-LAST:event_btnUpdateEmpActionPerformed

    private void btnRemoveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEmpActionPerformed
        // TODO add your handling code here:
        clearNotification();
        btnFindByEmpID.setEnabled(false);
        int indexDel = tblEmp.getSelectedRow();
        if (indexDel < 0) {
            JOptionPane.showMessageDialog(null, "Please choose any Employee to Delete");
            btnFindByEmpID.setEnabled(true);
        } else if (!checkUpdateStatus()) {
            JOptionPane.showMessageDialog(null, "Please finish UPDATE");
            btnFindByEmpID.setEnabled(true);
            return;
        } else {
            try {
                String idGet = txtEmpID.getText();
                int ans = JOptionPane.showConfirmDialog(null, "Do you want to REMOVE?", "REMOVE Employee", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    if (findID(idGet) != -1) {
                        listEmp.get(findID(idGet)).setIsDelete(true);
                        JOptionPane.showMessageDialog(null, "Delete successfully");
                        btnGetAllEmpActionPerformed(null);
                        btnFindByEmpID.setEnabled(true);
                        txtEmpID.setEditable(false);
                    }
                }
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_btnRemoveEmpActionPerformed

    private void tblEmpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseReleased
        // TODO add your handling code here:
        int iindexx = tblEmp.getSelectedRow();
        if (iindexx >= 0) {
            tblEmp.setRowSelectionInterval(iindexx, iindexx);
            tblEmpMouseClicked(null);
        }

    }//GEN-LAST:event_tblEmpMouseReleased

    private void tblEmpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblEmpKeyReleased
        // TODO add your handling code here:
        int iindexx = tblEmp.getSelectedRow();
        if (iindexx >= 0) {
            tblEmp.setRowSelectionInterval(iindexx, iindexx);
            tblEmpMouseClicked(null);
        }

    }//GEN-LAST:event_tblEmpKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!checkUpdateStatus() || flagCreateNew) {
            JOptionPane.showMessageDialog(null, "Please complete the function before closing the program");
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        } else {
            System.exit(0);
        }

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateEmp;
    private javax.swing.JButton btnFindByEmpID;
    private javax.swing.JButton btnGetAllEmp;
    private javax.swing.JButton btnRemoveEmp;
    private javax.swing.JButton btnUpdateEmp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddressWarnning;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDOBWarnning;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmailWarnning;
    private javax.swing.JLabel lblEmpID;
    private javax.swing.JLabel lblEmpIDWarnning;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblFullnameWarnning;
    private javax.swing.JLabel lblNotification;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPhoneWarnning;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblEmp;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
